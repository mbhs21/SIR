/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import nf.Examen;
import nf.Login;
import nf.Patient;
import nf.RequetesBDExamen;
import nf.RequetesBDLogin;
import nf.RequetesBDPatient;

/**
 *
 * @author em
 */
public class AjouterExamen extends javax.swing.JFrame {

    Examen examen;
    Login login;
    Connection conn;
    Patient pat;

    /**
     * Creates new form AjouterExamen
     */
    public AjouterExamen(Login login, Patient pat, Connection conn) {
        this.conn = conn;
        this.pat = pat;
        this.login = login;
        initComponents();

        proDetails.setText(login.getLogin().strip()
                + " - " + login.getLastName().strip()
                + " " + login.getFirstName().strip()
        );

        ImageIcon icone = new ImageIcon("src/img_icon/user_1.png");
        java.awt.Image img = icone.getImage();
        java.awt.Image newImg = img.getScaledInstance(userIcon.getWidth(), userIcon.getHeight(), java.awt.Image.SCALE_SMOOTH);
        icone = new ImageIcon(newImg);
        userIcon.setIcon(icone);

        ImageIcon iconeLogo = new ImageIcon("src/img_icon/logo.png");
        java.awt.Image imgLogo = iconeLogo.getImage();
        java.awt.Image newImgLogo = imgLogo.getScaledInstance(logoIcon.getWidth(), logoIcon.getHeight(), java.awt.Image.SCALE_SMOOTH);
        iconeLogo = new ImageIcon(newImgLogo);
        logoIcon.setIcon(iconeLogo);

        ImageIcon iconeDeconnection = new ImageIcon("src/img_icon/deconnexion.png");
        java.awt.Image imgDeconnection = iconeDeconnection.getImage();
        java.awt.Image newImgDeconnection = imgDeconnection.getScaledInstance(deconnexionButton.getHeight(), deconnexionButton.getHeight(), java.awt.Image.SCALE_SMOOTH);
        iconeDeconnection = new ImageIcon(newImgDeconnection);
        deconnexionButton.setIcon(iconeDeconnection);

        ImageIcon iconeRetour = new ImageIcon("src/img_icon/retour.png");
        java.awt.Image imgRetour = iconeRetour.getImage();
        java.awt.Image newImgRetour = imgRetour.getScaledInstance(retourButton.getHeight(), retourButton.getHeight(), java.awt.Image.SCALE_SMOOTH);
        iconeRetour = new ImageIcon(newImgRetour);
        retourButton.setIcon(iconeRetour);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addImgButton = new javax.swing.JButton();
        addExamenButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jTextField5 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        typeExamCombo = new javax.swing.JComboBox<>();
        jTextField4 = new javax.swing.JTextField();
        phField = new javax.swing.JTextField();
        hourField = new javax.swing.JTextField();
        minField = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        dayField = new javax.swing.JTextField();
        monthField = new javax.swing.JTextField();
        yearField = new javax.swing.JTextField();
        formatDate = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        proDetails = new javax.swing.JTextField();
        retourButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        logoIcon = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        userIcon = new javax.swing.JLabel();
        deconnexionButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setForeground(new java.awt.Color(204, 204, 255));
        jPanel2.setMaximumSize(new java.awt.Dimension(1490, 794));
        jPanel2.setMinimumSize(new java.awt.Dimension(1490, 794));
        jPanel2.setPreferredSize(new java.awt.Dimension(1490, 794));

        addImgButton.setBackground(new java.awt.Color(255, 255, 255));
        addImgButton.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        addImgButton.setForeground(new java.awt.Color(51, 51, 51));
        addImgButton.setText("Ajouter Image");
        addImgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImgButtonActionPerformed(evt);
            }
        });

        addExamenButton.setBackground(new java.awt.Color(255, 255, 255));
        addExamenButton.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        addExamenButton.setForeground(new java.awt.Color(51, 51, 51));
        addExamenButton.setText("Ajouter l'examen");
        addExamenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExamenButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));

        jTextField5.setBackground(new java.awt.Color(255, 255, 255));
        jTextField5.setFont(new java.awt.Font("Candara", 1, 16)); // NOI18N
        jTextField5.setForeground(new java.awt.Color(102, 102, 102));
        jTextField5.setText("Date de l'examen :");
        jTextField5.setBorder(null);
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jTextField12.setBackground(new java.awt.Color(255, 255, 255));
        jTextField12.setFont(new java.awt.Font("Candara", 1, 18)); // NOI18N
        jTextField12.setForeground(new java.awt.Color(0, 0, 0));
        jTextField12.setText("/");
        jTextField12.setBorder(null);
        jTextField12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField12ActionPerformed(evt);
            }
        });

        jTextField16.setBackground(new java.awt.Color(255, 255, 255));
        jTextField16.setFont(new java.awt.Font("Candara", 1, 18)); // NOI18N
        jTextField16.setForeground(new java.awt.Color(0, 0, 0));
        jTextField16.setText("/");
        jTextField16.setBorder(null);

        jTextField6.setBackground(new java.awt.Color(255, 255, 255));
        jTextField6.setFont(new java.awt.Font("Candara", 1, 16)); // NOI18N
        jTextField6.setForeground(new java.awt.Color(102, 102, 102));
        jTextField6.setText("Type de l'examen :");
        jTextField6.setBorder(null);

        typeExamCombo.setBackground(new java.awt.Color(204, 204, 204));
        typeExamCombo.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        typeExamCombo.setForeground(new java.awt.Color(51, 51, 51));
        typeExamCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Radio", "Scan", "IRM", "Echo" }));

        jTextField4.setBackground(new java.awt.Color(255, 255, 255));
        jTextField4.setFont(new java.awt.Font("Candara", 1, 16)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(102, 102, 102));
        jTextField4.setText("Identifiant du PH responsable : ");
        jTextField4.setBorder(null);

        phField.setBackground(new java.awt.Color(255, 255, 255));
        phField.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        phField.setForeground(new java.awt.Color(51, 51, 51));
        phField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        hourField.setBackground(new java.awt.Color(255, 255, 255));
        hourField.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        hourField.setForeground(new java.awt.Color(51, 51, 51));
        hourField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourFieldActionPerformed(evt);
            }
        });

        minField.setBackground(new java.awt.Color(255, 255, 255));
        minField.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        minField.setForeground(new java.awt.Color(51, 51, 51));

        jTextField7.setBackground(new java.awt.Color(255, 255, 255));
        jTextField7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTextField7.setForeground(new java.awt.Color(0, 0, 0));
        jTextField7.setText("-");
        jTextField7.setBorder(null);

        dayField.setBackground(new java.awt.Color(255, 255, 255));
        dayField.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        dayField.setForeground(new java.awt.Color(51, 51, 51));
        dayField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayFieldActionPerformed(evt);
            }
        });

        monthField.setBackground(new java.awt.Color(255, 255, 255));
        monthField.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        monthField.setForeground(new java.awt.Color(51, 51, 51));

        yearField.setBackground(new java.awt.Color(255, 255, 255));
        yearField.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        yearField.setForeground(new java.awt.Color(51, 51, 51));
        yearField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearFieldActionPerformed(evt);
            }
        });

        formatDate.setBackground(new java.awt.Color(255, 255, 255));
        formatDate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        formatDate.setForeground(new java.awt.Color(0, 153, 153));
        formatDate.setText("Format : DD/MM/YYYY   HH-mm");
        formatDate.setBorder(null);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(phField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(typeExamCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dayField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(monthField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(hourField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(formatDate, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dayField)
                    .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(hourField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(minField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(monthField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formatDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeExamCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(phField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(68, 68, 68))
        );

        jPanel3.setBackground(new java.awt.Color(242, 236, 234));

        proDetails.setBackground(java.awt.Color.white);
        proDetails.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        proDetails.setForeground(new java.awt.Color(51, 51, 51));
        proDetails.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.blue, null, null));
        proDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proDetailsActionPerformed(evt);
            }
        });

        retourButton.setBackground(java.awt.Color.white);
        retourButton.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        retourButton.setForeground(new java.awt.Color(0, 153, 204));
        retourButton.setText("Retour");
        retourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retourButtonActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 153, 153));
        jLabel1.setFont(new java.awt.Font("Candara", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setText("Ajout d'un examen");

        jLabel3.setFont(new java.awt.Font("Candara", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Health IT");

        jPanel4.setBackground(new java.awt.Color(242, 236, 234));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logoIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logoIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
        );

        jPanel5.setBackground(new java.awt.Color(242, 236, 234));
        jPanel5.setForeground(new java.awt.Color(242, 236, 234));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addComponent(userIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(userIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );

        deconnexionButton.setBackground(new java.awt.Color(255, 255, 255));
        deconnexionButton.setFont(new java.awt.Font("Candara", 0, 16)); // NOI18N
        deconnexionButton.setForeground(new java.awt.Color(0, 153, 204));
        deconnexionButton.setText("Se déconnecter");
        deconnexionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deconnexionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 222, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(deconnexionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(retourButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(proDetails, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(proDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(retourButton)
                            .addComponent(deconnexionButton)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel3))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(addExamenButton)
                        .addGap(104, 104, 104)
                        .addComponent(addImgButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(269, 269, 269)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addExamenButton)
                    .addComponent(addImgButton))
                .addContainerGap(135, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void proDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proDetailsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proDetailsActionPerformed

    private void retourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retourButtonActionPerformed
        // TODO add your handling code here:
        PageAccueil pgAccueil = null;
        try {
            pgAccueil = new PageAccueil(this.login, conn);
        } catch (IOException ex) {
            Logger.getLogger(CreationDMR.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(CreationDMR.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setVisible(false);
        pgAccueil.setVisible(true);
        pgAccueil.setLocationRelativeTo(null);

    }//GEN-LAST:event_retourButtonActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void hourFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hourFieldActionPerformed

    private void dayFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dayFieldActionPerformed

    private void jTextField12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField12ActionPerformed

    private void addExamenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExamenButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("RENTRER");

        if (checkAllFieldCompleted()) {
            System.out.println();
            System.out.println("RENTRERcheckField");
            System.out.println(checkDateNumeric(yearField.getText()) + " " + checkDateNumeric(monthField.getText()) + " " + checkDateNumeric(dayField.getText()) + " " + checkDateNumeric(hourField.getText()) + " " + checkDateNumeric(minField.getText()));
            System.out.println();

            try {
                System.out.println("PH entre: " + phField.getText());
                System.out.println("ph EXist ?" + checkExistPH(phField.getText()));
                if (checkExistPH(phField.getText()) == true) {
                    if (checkDateNumeric(yearField.getText()) && checkDateNumeric(monthField.getText()) && checkDateNumeric(dayField.getText()) && checkDateNumeric(hourField.getText()) && checkDateNumeric(minField.getText())) {
                        if (checkYearValid(yearField.getText()) && checkMonthValid(monthField.getText()) && checkDayValid(monthField.getText(), dayField.getText()) && checkHourValid(hourField.getText()) && checkMinValid(minField.getText())) {
                            System.out.println("RENTRERcheckDate");
                            String dateExam = yearField.getText() + "-" + monthField.getText() + "-" + dayField.getText() + " " + hourField.getText() + ":" + minField.getText() + ":00";
                            Timestamp timestampDateExam = Timestamp.valueOf(dateExam);
                            System.out.println("dateExam to add: " + timestampDateExam);
                            this.examen = new Examen(pat.getPatientId(), phField.getText(), typeExamCombo.getSelectedItem().toString(), timestampDateExam);

                            try {
                                RequetesBDExamen.addExamBD(examen, conn);
                            } catch (SQLException ex) {
                                Logger.getLogger(AjouterExamen.class.getName()).log(Level.SEVERE, null, ex);
                            }

                            try {
                                // TODO add your handling code here:
                                AccesListeExamen accesListeExamen = new AccesListeExamen(login, pat, conn);
                                this.setVisible(false);
                                accesListeExamen.setVisible(true);
                                accesListeExamen.setLocationRelativeTo(null);
                            } catch (SQLException ex) {
                                Logger.getLogger(PageAccueil.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            //pgAccueil.setLocationRelativeTo(null);
                        } else {
                            JOptionPane.showMessageDialog(null, "La date rentrée n'est pas valide", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "La date n'est pas en format numérique", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Ce praticien hospitalier n'exite pas", "", JOptionPane.PLAIN_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(AjouterExamen.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Tous les champs doivent être complétés", "", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_addExamenButtonActionPerformed

    public boolean checkDateNumeric(String str) {
        boolean isNumeric = true;
        for (int i = 0; i < str.length(); i++) {
            if (!Character.isDigit(str.charAt(i))) {
                isNumeric = false;
            }
        }
        System.out.println(isNumeric);
        return isNumeric;
    }

    public boolean checkYearValid(String year) {
        boolean isValid = true;
        int y = Integer.parseInt(yearField.getText());
        Date currentYear = new Date();
        int currentY = currentYear.getYear() + 1900;
        if (y > currentY) {
            isValid = false;
        }
        return isValid;
    }

    public boolean checkMonthValid(String year) {
        boolean isValid = true;

        int m = Integer.parseInt(monthField.getText());

        if (m < 1 || m > 12) {
            isValid = false;
        }
        return isValid;
    }

    public boolean checkDayValid(String day, String m) {
        boolean isValid = true;
        if (checkMonthValid(m)) {
            int d = Integer.parseInt(dayField.getText());
            int month = Integer.parseInt(monthField.getText());
            if (d < 1 || d > 31) {
                isValid = false;
            } else {
                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
                    isValid = (d > 0 && d < 32);
                } else {
                    if (month == 2) {
                        isValid = (d > 0 && d < 29);
                    } else {
                        if (month == 4 || month == 6 || month == 9 || month == 11) {
                            isValid = (d > 0 && d < 31);
                        } else {
                            isValid = false;
                        }
                    }
                }
            }
        }
        return isValid;
    }

    public boolean checkHourValid(String hour) {
        boolean isValid = true;
        int h = Integer.parseInt(hourField.getText());
        if (h > 24 || h < 0) {
            isValid = false;
        }
        return isValid;
    }

    public boolean checkMinValid(String min) {
        boolean isValid = true;
        int mn = Integer.parseInt(minField.getText());
        if (mn > 60 || mn < 0) {
            isValid = false;
        }
        return isValid;
    }

    public boolean checkExistPH(String ph) throws SQLException {
        if (ph.substring(0, 2).toUpperCase().equals("PH")) {
            return RequetesBDLogin.returnProId(ph, this.conn) != null;
        }
        return false;

    }

    /**
     * verifie si tous les champs nécessaires à l'ajout d'un examen sont remplis
     *
     * @return true si tout est complété
     */
    public boolean checkAllFieldCompleted() {
        return !dayField.getText().isEmpty() && !monthField.getText().isEmpty() && !yearField.getText().isEmpty() && !hourField.getText().isEmpty() && !minField.getText().isEmpty() && !phField.getText().isEmpty() && (!typeExamCombo.getSelectedItem().toString().isEmpty());
    }

    private void deconnexionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deconnexionButtonActionPerformed
        // TODO add your handling code here:
        Connexion connexion = null;
        try {
            connexion = new Connexion();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PageAccueil.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PageAccueil.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setVisible(false);
        connexion.setVisible(true);
        connexion.setLocationRelativeTo(null);

    }//GEN-LAST:event_deconnexionButtonActionPerformed

    private void yearFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yearFieldActionPerformed

    private void addImgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addImgButtonActionPerformed
        // TODO add your handling code here:
        int retour = JOptionPane.showConfirmDialog(this, "Souhaitez-vous ajouter une nouvel image à cet examen ? ", "", JOptionPane.YES_NO_OPTION);
        if (retour == 1) {

            System.out.println("RENTRER");

            if (checkAllFieldCompleted()) {
                System.out.println();
                System.out.println("RENTRERcheckField");
                System.out.println(checkDateNumeric(yearField.getText()) + " " + checkDateNumeric(monthField.getText()) + " " + checkDateNumeric(dayField.getText()) + " " + checkDateNumeric(hourField.getText()) + " " + checkDateNumeric(minField.getText()));
                System.out.println();

                try {
                    System.out.println("PH entre: " + phField.getText());
                    System.out.println("ph EXist ?" + checkExistPH(phField.getText()));
                    if (checkExistPH(phField.getText()) == true) {
                        if (checkDateNumeric(yearField.getText()) && checkDateNumeric(monthField.getText()) && checkDateNumeric(dayField.getText()) && checkDateNumeric(hourField.getText()) && checkDateNumeric(minField.getText())) {
                            if (checkYearValid(yearField.getText()) && checkMonthValid(monthField.getText()) && checkDayValid(monthField.getText(), dayField.getText()) && checkHourValid(hourField.getText()) && checkMinValid(minField.getText())) {
                                System.out.println("RENTRERcheckDate");
                                String dateExam = yearField.getText() + "-" + monthField.getText() + "-" + dayField.getText() + " " + hourField.getText() + ":" + minField.getText() + ":00";
                                Timestamp timestampDateExam = Timestamp.valueOf(dateExam);
                                System.out.println("dateExam to add: " + timestampDateExam);
                                this.examen = new Examen(pat.getPatientId(), phField.getText(), typeExamCombo.getSelectedItem().toString(), timestampDateExam);

                                try {
                                    this.examen=RequetesBDExamen.addExamBD(this.examen, conn);
                                } catch (SQLException ex) {
                                    Logger.getLogger(AjouterExamen.class.getName()).log(Level.SEVERE, null, ex);
                                }

                                // TODO add your handling code here:
                                AjouterImage ajouterImage = new AjouterImage(pat, this.examen, login, conn);
                                this.setVisible(false);
                                ajouterImage.setVisible(true);
                                ajouterImage.setLocationRelativeTo(null);
                            } else {
                                JOptionPane.showMessageDialog(null, "La date rentrée n'est pas valide", "", JOptionPane.PLAIN_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "La date n'est pas en format numérique", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Ce praticien hospitalier n'exite pas", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(AjouterExamen.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Tous les champs doivent être complétés", "", JOptionPane.PLAIN_MESSAGE);
            }
        } else {
            System.out.println("RENTRER");

            if (checkAllFieldCompleted()) {
                System.out.println();
                System.out.println("RENTRERcheckField");
                System.out.println(checkDateNumeric(yearField.getText()) + " " + checkDateNumeric(monthField.getText()) + " " + checkDateNumeric(dayField.getText()) + " " + checkDateNumeric(hourField.getText()) + " " + checkDateNumeric(minField.getText()));
                System.out.println();

                try {
                    System.out.println("PH entre: " + phField.getText());
                    System.out.println("ph EXist ?" + checkExistPH(phField.getText()));
                    if (checkExistPH(phField.getText()) == true) {
                        if (checkDateNumeric(yearField.getText()) && checkDateNumeric(monthField.getText()) && checkDateNumeric(dayField.getText()) && checkDateNumeric(hourField.getText()) && checkDateNumeric(minField.getText())) {
                            if (checkYearValid(yearField.getText()) && checkMonthValid(monthField.getText()) && checkDayValid(monthField.getText(), dayField.getText()) && checkHourValid(hourField.getText()) && checkMinValid(minField.getText())) {
                                System.out.println("RENTRERcheckDate");
                                String dateExam = yearField.getText() + "-" + monthField.getText() + "-" + dayField.getText() + " " + hourField.getText() + ":" + minField.getText() + ":00";
                                Timestamp timestampDateExam = Timestamp.valueOf(dateExam);
                                System.out.println("dateExam to add: " + timestampDateExam);
                                this.examen = new Examen(pat.getPatientId(), phField.getText(), typeExamCombo.getSelectedItem().toString(), timestampDateExam);

                                try {
                                    this.examen=RequetesBDExamen.addExamBD(this.examen, conn);
                                } catch (SQLException ex) {
                                    Logger.getLogger(AjouterExamen.class.getName()).log(Level.SEVERE, null, ex);
                                }

                                // TODO add your handling code here:
                                AjouterImage ajouterImage = new AjouterImage(pat, this.examen, login, conn);
                                this.setVisible(false);
                                ajouterImage.setVisible(true);
                                ajouterImage.setLocationRelativeTo(null);
                            } else {
                                JOptionPane.showMessageDialog(null, "La date rentrée n'est pas valide", "", JOptionPane.PLAIN_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "La date n'est pas en format numérique", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Ce praticien hospitalier n'exite pas", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(AjouterExamen.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Tous les champs doivent être complétés", "", JOptionPane.PLAIN_MESSAGE);
            }
        }

    }//GEN-LAST:event_addImgButtonActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AjouterExamen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AjouterExamen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AjouterExamen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AjouterExamen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new AjouterExamen().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addExamenButton;
    private javax.swing.JButton addImgButton;
    private javax.swing.JTextField dayField;
    private javax.swing.JButton deconnexionButton;
    private javax.swing.JTextField formatDate;
    private javax.swing.JTextField hourField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JLabel logoIcon;
    private javax.swing.JTextField minField;
    private javax.swing.JTextField monthField;
    private javax.swing.JTextField phField;
    private javax.swing.JTextField proDetails;
    private javax.swing.JButton retourButton;
    private javax.swing.JComboBox<String> typeExamCombo;
    private javax.swing.JLabel userIcon;
    private javax.swing.JTextField yearField;
    // End of variables declaration//GEN-END:variables
}
